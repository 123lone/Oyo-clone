"use client"
import React, { useState, useEffect } from 'react'
import { supabase } from '@/lib/supabase'
import { X, Mail, User, MessageSquare, Send, CheckCircle } from 'lucide-react'
import type { Hotel } from '@/lib/supabase'

interface ContactFormProps {
  onClose: () => void
  userEmail?: string
  hotel?: Hotel
}

export default function ContactForm({ onClose, userEmail = "", hotel }: ContactFormProps) {
  const [formData, setFormData] = useState({
    name: '',
    email: userEmail,
    message: ''
  })
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [isSubmitted, setIsSubmitted] = useState(false)

  useEffect(() => {
    setFormData(prev => ({ ...prev, email: userEmail }))
  }, [userEmail])

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormData(prev => ({ ...prev, [name]: value }))
  }

  // Update the handleSubmit function in your ContactForm component

const handleSubmit = async () => {
  if (!formData.name.trim() || !formData.email.trim() || !formData.message.trim()) {
    alert('Please fill in all fields')
    return
  }

  setIsSubmitting(true)

  try {
    let ownerEmail = null
    if (hotel) {
      if (!hotel.hotel_owners?.email) {
        throw new Error("Could not find hotel owner email")
      }
      ownerEmail = hotel.hotel_owners.email
      console.log("Owner email:", ownerEmail)
    }

    // Updated to match your actual database schema
    const messageData = {
      name: formData.name,
      email: formData.email, // Changed from sender_email to email
      message: formData.message,
      hotel_id: hotel?.id || null, // Add hotel_id if you want to track which hotel this message is for
      // created_at will be auto-generated by the database
    }

    console.log("Submitting message with data:", messageData)

    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error("Request timed out")), 20000)
    })

    const insertPromise = supabase.from("contact_messages").insert(messageData)

    const { error } = await Promise.race([insertPromise, timeoutPromise])

    if (error) {
      console.error("Insert error:", error)
      throw error
    }

    console.log("Message inserted successfully")
    setIsSubmitted(true)

    setTimeout(() => {
      setIsSubmitted(false)
      setFormData({ name: '', email: userEmail, message: '' })
      onClose()
    }, 3000)
  } catch (error: any) {
    console.error('Error submitting form:', error.message || error)
    alert(`Failed to send message: ${error.message || 'Please try again later.'}`)
  } finally {
    setIsSubmitting(false)
  }
}

  return (
    <div className="bg-white rounded-lg shadow-xl max-w-md w-full p-6 mx-auto">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-xl font-semibold text-gray-900">
          {hotel ? `Contact ${hotel.name} Owner` : "Contact Us"}
        </h2>
        <button
          onClick={onClose}
          className="p-2 hover:bg-gray-100 rounded-full transition-colors"
        >
          <X className="w-5 h-5 text-gray-500" />
        </button>
      </div>

      <div>
        {!isSubmitted ? (
          <>
            <p className="text-gray-600 mb-6">
              {hotel 
                ? "Send a message to the hotel owner for inquiries or special requests."
                : "Have a question or need assistance? We're here to help!"}
            </p>

            <div className="space-y-4">
              <div>
                <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-2">
                  <User className="w-4 h-4 inline mr-2" />
                  Your Name
                </label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-transparent"
                  placeholder="Enter your full name"
                />
              </div>

              <div>
                <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
                  <Mail className="w-4 h-4 inline mr-2" />
                  Email Address
                </label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={formData.email}
                  onChange={handleInputChange}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 focus:ring-2 focus:ring-red-500 focus:border-transparent"
                  placeholder="your@email.com"
                  readOnly={!!userEmail}
                />
                {userEmail && (
                  <p className="text-xs text-gray-500 mt-1">
                    Using your registered email address
                  </p>
                )}
              </div>

              <div>
                <label htmlFor="message" className="block text-sm font-medium text-gray-700 mb-2">
                  <MessageSquare className="w-4 h-4 inline mr-2" />
                  Message
                </label>
                <textarea
                  id="message"
                  name="message"
                  value={formData.message}
                  onChange={handleInputChange}
                  required
                  rows={4}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-transparent resize-none"
                  placeholder={hotel 
                    ? "Enter your message for the hotel owner..."
                    : "How can we help you? Please describe your inquiry..."}
                />
              </div>

              <button
                onClick={handleSubmit}
                disabled={isSubmitting}
                className="w-full bg-red-600 text-white py-2 px-4 rounded-md hover:bg-red-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2 transition-colors"
              >
                {isSubmitting ? (
                  <>
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                    Sending...
                  </>
                ) : (
                  <>
                    <Send className="w-4 h-4" />
                    Send Message
                  </>
                )}
              </button>
            </div>
          </>
        ) : (
          <div className="text-center py-8">
            <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />
            <h3 className="text-lg font-semibold text-gray-900 mb-2">
              Message Sent Successfully!
            </h3>
            <p className="text-gray-600 mb-4">
              {hotel 
                ? "The hotel owner will get back to you within 24 hours."
                : "Thank you for contacting us. We'll get back to you within 24 hours."}
            </p>
            <div className="text-sm text-gray-500">
              This section will close automatically...
            </div>
          </div>
        )}
      </div>
    </div>
  )
}